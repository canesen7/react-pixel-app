{"version":3,"sources":["Components/LeftBar/MainColors.jsx","Components/LeftBar/AddedColors.jsx","Components/LeftBar/ConfBar.jsx","Components/PixelContainer/PerPixel.jsx","Components/PixelContainer/Row.jsx","Components/PixelContainer/PixelContainer.jsx","Components/Main/Main.jsx","index.js"],"names":["MainColors","props","className","pickerList","map","picker","i","style","marginRight","background","color","width","name","height","onClick","publicShowColor","display","displayControl","position","top","disableAlpha","onChange","e","publicChangeColor","hex","AddedColors","addedColors","setColor","ConfBar","useState","showBGPicker","setShowBGPicker","setShowBGPickerDisplay","showColorPicker","setShowColorPicker","setShowColorPickerDisplay","showGridColorPicker","setShowGridColorPicker","setShowGridPickerDisplay","backgroundColor","showValue","gridColor","openConfiguration","bottom","setOpenConfiguration","icon","faChevronDown","faChevronUp","pluginName","setBackgroundColor","setGridColor","PerPixel","setClickedX","setClickedY","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","isHovered","setIsHovered","isPixelChanged","setIsPixelChanged","pixelStyle","border","showGrid","borderWidth","x","y","cursor","grid","leftClickApplyColor","rightClickApplyColor","applyColor","event","type","preventDefault","clickedX","console","log","onMouseEnter","onMouseLeave","onContextMenu","onMouseDown","setMouseDown","Set","has","length","setAddedColors","checkColorAddedBefore","clickedY","onMouseOver","mouseDown","buttons","onMouseUp","Row","row","push","divWidth","divHeight","allUsedColors","setAllUsedColors","brushSize","PixelContainer","App","setShowGrid","setDivWith","setDivHeight","useEffect","$","css","ReactDOM","render","Main","document","getElementById"],"mappings":"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","file":"static/js/main.9cc91a2b.chunk.js","sourcesContent":["import { ChromePicker } from 'react-color';\r\n\r\nconst MainColors = (props) => {\r\n    return(\r\n        <div className={\"colors\"}>\r\n        {props.pickerList.map((picker, i) => (\r\n            <div className=\"conf\" key={i} style={{marginRight: i === 2 ? \"\" : \"10px\"}}>\r\n                <div style={{ background: picker.color, width: picker.name === \"paletteColor\" ? \"50px\" : \"35px\", height: picker.name === \"paletteColor\" ? \"50px\" : \"35px\" }} className=\"color-picker\" onClick={() => props.publicShowColor(picker.name)}></div>\r\n                <div style={{ display: picker.displayControl, position: \"absolute\", top: i === 1 ? \"-220px\" : \"-215px\" }}>\r\n                    <ChromePicker disableAlpha={true} style={{ display: picker.displayControl }} color={picker.color} onChange={(e) => props.publicChangeColor(e.hex, picker.name)} />\r\n                </div>\r\n            </div>\r\n        ))}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default MainColors","const AddedColors = (props) => {\r\n    return (\r\n        <div className={\"added-colors\"}>\r\n            {props.addedColors.map((color) => (\r\n                <div className={\"color\"} style={{background: color}} onClick={() => props.setColor(color)}></div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddedColors","import { useState } from \"react\"\r\nimport MainColors from \"./MainColors\"\r\nimport AddedColors from \"./AddedColors\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ConfBar = (props) => {\r\n    const [showBGPicker, setShowBGPicker] = useState(false)\r\n    const setShowBGPickerDisplay = showBGPicker ? \"\" : \"none\"\r\n    const [showColorPicker, setShowColorPicker] = useState(false)\r\n    const setShowColorPickerDisplay = showColorPicker ? \"\" : \"none\"\r\n    const [showGridColorPicker, setShowGridColorPicker] = useState(false)\r\n    const setShowGridPickerDisplay = showGridColorPicker ? \"\" : \"none\"\r\n\r\n    const publicChangeColor = (color, pluginName) => {\r\n        if (pluginName === \"background\") {\r\n            props.setBackgroundColor(color)\r\n        } else if (pluginName === \"paletteColor\") {\r\n            props.setColor(color)\r\n        } else {\r\n            props.setGridColor(color)\r\n        }\r\n    }\r\n\r\n    const changeConfiguration = () => {\r\n        props.setOpenConfiguration(!props.openConfiguration)\r\n    }\r\n\r\n    const publicShowColor = pluginName => {\r\n        if (pluginName === \"background\") {\r\n            setShowBGPicker(!showBGPicker)\r\n            setShowColorPicker(false)\r\n            setShowGridColorPicker(false)\r\n        } else if (pluginName === \"paletteColor\") {\r\n            setShowColorPicker(!showColorPicker)\r\n            setShowBGPicker(false)\r\n            setShowGridColorPicker(false)\r\n        } else {\r\n            setShowGridColorPicker(!showGridColorPicker)\r\n            setShowColorPicker(false)\r\n            setShowBGPicker(false)\r\n        }\r\n    }\r\n\r\n    const pickerList = [{\r\n        name: \"background\",\r\n        background: props.backgroundColor,\r\n        showValue: showBGPicker,\r\n        displayControl: setShowBGPickerDisplay,\r\n        color: props.backgroundColor\r\n    },\r\n    {\r\n        name: \"paletteColor\",\r\n        background: props.color,\r\n        showValue: showColorPicker,\r\n        displayControl: setShowColorPickerDisplay,\r\n        color: props.color\r\n    },\r\n    {\r\n        name: \"gridColor\",\r\n        background: props.gridColor,\r\n        showValue: showGridColorPicker,\r\n        displayControl: setShowGridPickerDisplay,\r\n        color: props.gridColor\r\n    },\r\n    ]\r\n\r\n    const iconStyle = {\r\n        width: \"30px\",\r\n        height: \"30px\",\r\n        color: \"white\",\r\n        position: \"relative\",\r\n        top: \"3px\",\r\n    }\r\n\r\n    return (\r\n        <div className={props.openConfiguration === true ? \"conf-container open-configuration-container\" : \"conf-container close-configuration-container\"} style={{ bottom: props.openConfiguration === true ? \"0px\" : \"-99px\" }}>\r\n            <div className={\"open-close-button\"}>\r\n                <div className={\"open-close-button-inside\"} onClick={changeConfiguration}>\r\n                    <FontAwesomeIcon icon={props.openConfiguration === true ? faChevronDown : faChevronUp} style={iconStyle} className={props.openConfiguration === true ? \"open-configuration-button\" : \"close-configuration-button\"}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"color-container\">\r\n                <MainColors pickerList={pickerList} publicShowColor={publicShowColor} publicChangeColor={publicChangeColor} />\r\n                <AddedColors addedColors={props.addedColors} setColor={props.setColor} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfBar","import { useEffect, useState } from \"react\"\r\n\r\nconst PerPixel = (props) => {\r\n\r\n  let backgroundColor = props.backgroundColor\r\n  let color = props.color\r\n\r\n  const setClickedX = props.setClickedX\r\n  const setClickedY = props.setClickedY\r\n\r\n  const [pixelColor, setPixelColor] = useState(color)\r\n  const [oldColor, setOldColor] = useState(pixelColor);\r\n  const [canChangeColor, setCanChangeColor] = useState(true)\r\n  const [isHovered, setIsHovered] = useState(false)\r\n  const [isPixelChanged, setIsPixelChanged] = useState(false)\r\n\r\n  const pixelStyle = {\r\n    backgroundColor: isPixelChanged === true ? pixelColor : isHovered === true ? pixelColor : backgroundColor,\r\n    border: props.showGrid === true ? `1px solid ${props.gridColor}` : \"none\",\r\n    borderWidth: props.showGrid === true ? props.x === 0 && props.y === 0 ? \"1px 1px 1px\" : props.x === 0 ? \"0 1px 1px 1px\" : props.y === 0 ? \"1px 1px 1px 0px\" : \"0px 1px 1px 0px\" : \"none\",\r\n    cursor: \"pointer\",\r\n    width: props.grid,\r\n    height: props.grid,\r\n    display: \"block\",\r\n    cursor: \"cell\",\r\n    boxSizing: \"inherit\"\r\n  }\r\n\r\n  const checkColorAddedBefore = (color) => {\r\n    const newColorList = new Set(props.addedColors);\r\n\r\n    if (newColorList.has(color) != true && props.addedColors.length < 7) {\r\n      props.setAddedColors([...props.addedColors, color])\r\n    }\r\n  }\r\n\r\n  const leftClickApplyColor = () => {\r\n    setPixelColor(color)\r\n    setCanChangeColor(false)\r\n    setIsPixelChanged(true)\r\n  }\r\n\r\n  const rightClickApplyColor = () => {\r\n    setPixelColor(backgroundColor)\r\n    setIsPixelChanged(false)\r\n    setCanChangeColor(false)\r\n  }\r\n\r\n  const applyColor = (event) => {\r\n    if (event.type === \"click\") {\r\n      leftClickApplyColor()\r\n    }\r\n    if (event.type === \"contextmenu\") {\r\n      event.preventDefault()\r\n      rightClickApplyColor()\r\n    }\r\n  }\r\n\r\n  const changeColorOnHover = () => {\r\n    setOldColor(isPixelChanged === true ? pixelColor : color)\r\n    setPixelColor(color)\r\n    setCanChangeColor(true)\r\n    setIsHovered(true)\r\n  }\r\n\r\n  const resetColor = () => {\r\n    if (canChangeColor) {\r\n      setPixelColor(oldColor)\r\n    }\r\n\r\n    setCanChangeColor(true)\r\n    setIsHovered(false)\r\n  }\r\n\r\n  const onMouseDown = () => {\r\n    props.setMouseDown(true)\r\n    leftClickApplyColor()\r\n    checkColorAddedBefore(color)\r\n    setClickedX(props.x)\r\n    setClickedY(props.y)\r\n    if(props.clickedX + 3 === props.x) {\r\n      console.log(\"aaa\")\r\n    }\r\n    if(props.clickedY + 3 === props.y) {\r\n      console.log(\"bbb\")\r\n    }\r\n  }\r\n\r\n  const onMouseUp = () => {\r\n    props.setMouseDown(false)\r\n    leftClickApplyColor()\r\n  }\r\n\r\n  const drawLine = (e) => {\r\n    if (props.mouseDown === true && e.buttons === 1) {\r\n      leftClickApplyColor()\r\n    } else if (props.mouseDown === true && e.buttons === 2) {\r\n      rightClickApplyColor()\r\n    }\r\n  }\r\n\r\n  if(props.clickedX === props.x + 3 && props.clickedX === props.x - 3) {\r\n    console.log(\"aaa\")\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={pixelStyle}\r\n      className={`column-${props.x + 1} column`}\r\n      onClick={applyColor}\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}\r\n      onContextMenu={applyColor}\r\n      onMouseDown={onMouseDown}\r\n      onMouseOver={drawLine}\r\n      onMouseUp={onMouseUp}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PerPixel","import PerPixel from \"./PerPixel\"\r\n\r\nconst Row = (props) => {\r\n\r\n    let row = []\r\n    let grid = props.grid\r\n    let backgroundColor = props.backgroundColor\r\n    let color = props.color\r\n\r\n    for (let x = 0; x < props.width; x++) {\r\n        row.push(\r\n            <PerPixel\r\n                gridColor={props.gridColor}\r\n                mouseDown={props.mouseDown}\r\n                setMouseDown={props.setMouseDown} \r\n                showGrid={props.showGrid}\r\n                key={x}\r\n                divWidth={props.divWidth}\r\n                divHeight={props.divHeight}\r\n                grid={props.grid} \r\n                x={x}\r\n                y={props.y}\r\n                width={props.width}\r\n                height={props.height}\r\n                backgroundColor={backgroundColor}\r\n                color={color} \r\n                addedColors={props.addedColors}\r\n                setAddedColors={props.setAddedColors} \r\n                allUsedColors={props.allUsedColors}\r\n                setAllUsedColors={props.setAllUsedColors}\r\n                brushSize={props.brushSize}\r\n                clickedX={props.clickedX}\r\n                setClickedX={props.setClickedX}\r\n                clickedY={props.clickedY}\r\n                setClickedY={props.setClickedY}\r\n            />)\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: grid, height: grid }} className={`row-${props.y + 1} per-row`}> {row} </div>\r\n    )\r\n}\r\n\r\nexport default Row","import Row from \"./Row\"\r\n\r\nconst PixelContainer = (props) => {\r\n\r\n    let width = props.width\r\n    let height = props.height\r\n    let backgroundColor = props.backgroundColor\r\n    let color = props.color\r\n    let row = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        row.push(\r\n        <Row \r\n            gridColor={props.gridColor}\r\n            showGrid={props.showGrid}\r\n            key={y}\r\n            grid={props.grid} \r\n            width={width} \r\n            divWidth={props.divWidth}\r\n            divHeight={props.divHeight} \r\n            height={height} \r\n            y={y} \r\n            backgroundColor={backgroundColor} \r\n            color={color}\r\n            mouseDown={props.mouseDown}\r\n            setMouseDown={props.setMouseDown}\r\n            addedColors={props.addedColors}\r\n            setAddedColors={props.setAddedColors}\r\n            allUsedColors={props.allUsedColors}\r\n            setAllUsedColors={props.setAllUsedColors}\r\n            brushSize={props.brushSize}\r\n            clickedX={props.clickedX}\r\n            setClickedX={props.setClickedX}\r\n            clickedY={props.clickedY}\r\n            setClickedY={props.setClickedY}\r\n        />)\r\n    }\r\n\r\n    return (\r\n        <div className={\"pixel-container\"} style={{ width: props.divWidth, height: props.divHeight, borderWidth: \"1px 0 0 0\" }}>\r\n            {row}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PixelContainer","import ConfBar from \"../LeftBar/ConfBar\"\r\nimport PixelContainer from \"../PixelContainer/PixelContainer\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./main.css\"\r\nimport $ from \"jquery\"\r\n\r\nconst App = () => {\r\n  const [grid, setGrid] = useState(40)\r\n  const [showGrid, setShowGrid] = useState(true)\r\n  const [width, setWidth] = useState(16)\r\n  const [height, setHeight] = useState(16)\r\n  const [divWidth, setDivWith] = useState(width * grid)\r\n  const [divHeight, setDivHeight] = useState(height * grid)\r\n  const [backgroundColor, setBackgroundColor] = useState(\"black\")\r\n  const [color, setColor] = useState(\"#ffff\")\r\n  const [gridColor, setGridColor] = useState(\"#585858\")\r\n  const [openConfiguration, setOpenConfiguration] = useState(true)\r\n  const [addedColors, setAddedColors] = useState([])\r\n  const [allUsedColors, setAllUsedColors] = useState([])\r\n  const [brushSize, setBrushSize] = useState(3)\r\n  const [clickedX, setClickedX] = useState()\r\n  const [clickedY, setClickedY] = useState()\r\n\r\n  const [mouseDown, setMouseDown] = useState(false)\r\n\r\n  useEffect(() => {\r\n    $(\".column\").css(\"height\", grid).css(\"width\", grid)\r\n    $(\".per-row\").css(\"height\", grid).css(\"width\", grid)\r\n    setDivHeight(height * grid)\r\n    setDivWith(width * grid)\r\n  }, [grid, height, width]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <PixelContainer\r\n        width={width}\r\n        height={height}\r\n        divWidth={divWidth}\r\n        divHeight={divHeight}\r\n        grid={grid}\r\n        gridColor={gridColor}\r\n        backgroundColor={backgroundColor}\r\n        color={color} \r\n        showGrid={showGrid}\r\n        mouseDown={mouseDown}\r\n        setMouseDown={setMouseDown}\r\n        addedColors={addedColors}\r\n        setAddedColors={setAddedColors}\r\n        allUsedColors={allUsedColors}\r\n        setAllUsedColors={setAllUsedColors}\r\n        brushSize={brushSize}\r\n        clickedX={clickedX}\r\n        setClickedX={setClickedX}\r\n        clickedY={clickedY}\r\n        setClickedY={setClickedY}/>\r\n      <ConfBar \r\n        addedColors={addedColors}\r\n        backgroundColor={backgroundColor}\r\n        setBackgroundColor={setBackgroundColor}\r\n        color={color}\r\n        setColor={setColor}\r\n        gridColor={gridColor}\r\n        setGridColor={setGridColor}\r\n        showGrid={showGrid}\r\n        setShowGrid={setShowGrid}\r\n        openConfiguration={openConfiguration}\r\n        setOpenConfiguration={setOpenConfiguration}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './Components/Main/Main';\r\n\r\nReactDOM.render(\r\n    <Main />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}