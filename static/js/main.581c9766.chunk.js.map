{"version":3,"sources":["Components/ConfigContainer/OpenCloseButton.jsx","Components/ConfigContainer/MainColors.jsx","Components/ConfigContainer/AddedColors.jsx","Components/ConfigContainer/Colors.jsx","Components/ConfigContainer/ConfBar.jsx","Components/PixelContainer/PerPixel.jsx","Components/PixelContainer/Row.jsx","Components/PixelContainer/PixelContainer.jsx","Components/Main/Main.jsx","index.js"],"names":["OpenCloseButton","props","className","onClick","setOpenConfiguration","openConfiguration","icon","faChevronDown","faChevronUp","style","width","height","color","position","top","MainColors","pickerList","map","picker","i","marginRight","background","name","publicShowColor","display","displayControl","disableAlpha","onChange","e","publicChangeColor","hex","AddedColors","addedColors","setColor","Colors","useState","showBGPicker","setShowBGPicker","setShowBGPickerDisplay","showColorPicker","setShowColorPicker","setShowColorPickerDisplay","showGridColorPicker","setShowGridColorPicker","setShowGridPickerDisplay","backgroundColor","showValue","gridColor","pluginName","setBackgroundColor","setGridColor","ConfBar","bottom","PerPixel","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","isHovered","setIsHovered","isPixelChanged","setIsPixelChanged","pixelStyle","border","showGrid","borderWidth","x","y","cursor","grid","leftClickApplyColor","rightClickApplyColor","applyColor","event","type","preventDefault","onMouseEnter","onMouseLeave","onContextMenu","onMouseDown","setMouseDown","Set","has","length","setAddedColors","checkColorAddedBefore","onMouseOver","mouseDown","buttons","onMouseUp","Row","row","push","divWidth","divHeight","allUsedColors","setAllUsedColors","PixelContainer","App","setShowGrid","setDivWith","setDivHeight","useEffect","$","css","ReactDOM","render","Main","document","getElementById"],"mappings":"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","file":"static/js/main.581c9766.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst OpenCloseButton = (props) => {\r\n    const iconStyle = {\r\n        width: \"30px\",\r\n        height: \"30px\",\r\n        color: \"white\",\r\n        position: \"relative\",\r\n        top: \"3px\",\r\n    }\r\n    \r\n    const changeConfiguration = () => {\r\n        props.setOpenConfiguration(!props.openConfiguration)\r\n    }\r\n    \r\n    return (\r\n        <div className={\"open-close-button\"}>\r\n            <div className={\"open-close-button-inside\"} onClick={changeConfiguration}>\r\n                <FontAwesomeIcon icon={props.openConfiguration === true ? faChevronDown : faChevronUp} style={iconStyle} className={props.openConfiguration === true ? \"open-configuration-button\" : \"close-configuration-button\"} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpenCloseButton","import { ChromePicker } from 'react-color';\r\n\r\nconst MainColors = (props) => {\r\n    return(\r\n        <div className={\"colors\"}>\r\n        {props.pickerList.map((picker, i) => (\r\n            <div className=\"conf\" key={i} style={{marginRight: i === 2 ? \"\" : \"10px\"}}>\r\n                <div style={{ background: picker.color, width: picker.name === \"paletteColor\" ? \"50px\" : \"35px\", height: picker.name === \"paletteColor\" ? \"50px\" : \"35px\" }} className=\"color-picker\" onClick={() => props.publicShowColor(picker.name)}></div>\r\n                <div style={{ display: picker.displayControl, position: \"absolute\", top: i === 1 ? \"-220px\" : \"-215px\" }}>\r\n                    <ChromePicker disableAlpha={true} style={{ display: picker.displayControl }} color={picker.color} onChange={(e) => props.publicChangeColor(e.hex, picker.name)} />\r\n                </div>\r\n            </div>\r\n        ))}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default MainColors","const AddedColors = (props) => {\r\n    return (\r\n        <div className={\"added-colors\"}>\r\n            {props.addedColors.map((color) => (\r\n                <div className={\"color\"} style={{background: color}} onClick={() => props.setColor(color)}></div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddedColors","import { useState } from \"react\"\r\nimport MainColors from \"./MainColors\"\r\nimport AddedColors from \"./AddedColors\"\r\n\r\nconst Colors = (props) => {\r\n    const [showBGPicker, setShowBGPicker] = useState(false)\r\n    const setShowBGPickerDisplay = showBGPicker ? \"\" : \"none\"\r\n    const [showColorPicker, setShowColorPicker] = useState(false)\r\n    const setShowColorPickerDisplay = showColorPicker ? \"\" : \"none\"\r\n    const [showGridColorPicker, setShowGridColorPicker] = useState(false)\r\n    const setShowGridPickerDisplay = showGridColorPicker ? \"\" : \"none\"\r\n\r\n    const publicChangeColor = (color, pluginName) => {\r\n        if (pluginName === \"background\") {\r\n            props.setBackgroundColor(color)\r\n        } else if (pluginName === \"paletteColor\") {\r\n            props.setColor(color)\r\n        } else {\r\n            props.setGridColor(color)\r\n        }\r\n    }\r\n\r\n    const publicShowColor = pluginName => {\r\n        if (pluginName === \"background\") {\r\n            setShowBGPicker(!showBGPicker)\r\n            setShowColorPicker(false)\r\n            setShowGridColorPicker(false)\r\n        } else if (pluginName === \"paletteColor\") {\r\n            setShowColorPicker(!showColorPicker)\r\n            setShowBGPicker(false)\r\n            setShowGridColorPicker(false)\r\n        } else {\r\n            setShowGridColorPicker(!showGridColorPicker)\r\n            setShowColorPicker(false)\r\n            setShowBGPicker(false)\r\n        }\r\n    }\r\n\r\n    const pickerList = [{\r\n        name: \"background\",\r\n        background: props.backgroundColor,\r\n        showValue: showBGPicker,\r\n        displayControl: setShowBGPickerDisplay,\r\n        color: props.backgroundColor\r\n    },\r\n    {\r\n        name: \"paletteColor\",\r\n        background: props.color,\r\n        showValue: showColorPicker,\r\n        displayControl: setShowColorPickerDisplay,\r\n        color: props.color\r\n    },\r\n    {\r\n        name: \"gridColor\",\r\n        background: props.gridColor,\r\n        showValue: showGridColorPicker,\r\n        displayControl: setShowGridPickerDisplay,\r\n        color: props.gridColor\r\n    },\r\n    ]\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"color-container\">\r\n                    <MainColors pickerList={pickerList} publicShowColor={publicShowColor} publicChangeColor={publicChangeColor} />\r\n                    <AddedColors addedColors={props.addedColors} setColor={props.setColor} />\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Colors","import OpenCloseButton from \"./OpenCloseButton\"\r\nimport Colors from \"./Colors\"\r\n\r\nconst ConfBar = (props) => {\r\n\r\n    return (\r\n        <div className={props.openConfiguration === true ? \"conf-container open-configuration-container\" : \"conf-container close-configuration-container\"} style={{ bottom: props.openConfiguration === true ? \"0px\" : \"-99px\" }}>\r\n            <OpenCloseButton openConfiguration={props.openConfiguration} setOpenConfiguration={props.setOpenConfiguration}/>\r\n            <div className={\"conf-area\"}>asdf</div>\r\n            <div className={\"conf-area\"}>\r\n                <Colors \r\n                    setBackgroundColor={props.setBackgroundColor}\r\n                    setColor={props.setColor}\r\n                    setGridColor={props.setGridColor}\r\n                    backgroundColor={props.backgroundColor}\r\n                    color={props.color}\r\n                    gridColor={props.gridColor}\r\n                    addedColors={props.addedColors}/>\r\n            </div>\r\n            <div className={\"conf-area\"}>asdf</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfBar","import { useEffect, useState } from \"react\"\r\n\r\nconst PerPixel = (props) => {\r\n\r\n  let backgroundColor = props.backgroundColor\r\n  let color = props.color\r\n\r\n  const [pixelColor, setPixelColor] = useState(color)\r\n  const [oldColor, setOldColor] = useState(pixelColor);\r\n  const [canChangeColor, setCanChangeColor] = useState(true)\r\n  const [isHovered, setIsHovered] = useState(false)\r\n  const [isPixelChanged, setIsPixelChanged] = useState(false)\r\n\r\n  const pixelStyle = {\r\n    backgroundColor: isPixelChanged === true ? pixelColor : isHovered === true ? pixelColor : backgroundColor,\r\n    border: props.showGrid === true ? `1px solid ${props.gridColor}` : \"none\",\r\n    borderWidth: props.showGrid === true ? props.x === 0 && props.y === 0 ? \"1px 1px 1px\" : props.x === 0 ? \"0 1px 1px 1px\" : props.y === 0 ? \"1px 1px 1px 0px\" : \"0px 1px 1px 0px\" : \"none\",\r\n    cursor: \"pointer\",\r\n    width: props.grid,\r\n    height: props.grid,\r\n    display: \"block\",\r\n    cursor: \"cell\",\r\n    boxSizing: \"inherit\"\r\n  }\r\n\r\n  const checkColorAddedBefore = (color) => {\r\n    const newColorList = new Set(props.addedColors);\r\n\r\n    if (newColorList.has(color) != true && props.addedColors.length < 7) {\r\n      props.setAddedColors([...props.addedColors, color])\r\n    }\r\n  }\r\n\r\n  const leftClickApplyColor = () => {\r\n    setPixelColor(color)\r\n    setCanChangeColor(false)\r\n    setIsPixelChanged(true)\r\n  }\r\n\r\n  const rightClickApplyColor = () => {\r\n    setPixelColor(backgroundColor)\r\n    setIsPixelChanged(false)\r\n    setCanChangeColor(false)\r\n  }\r\n\r\n  const applyColor = (event) => {\r\n    if (event.type === \"click\") {\r\n      leftClickApplyColor()\r\n    }\r\n    if (event.type === \"contextmenu\") {\r\n      event.preventDefault()\r\n      rightClickApplyColor()\r\n    }\r\n  }\r\n\r\n  const changeColorOnHover = () => {\r\n    setOldColor(isPixelChanged === true ? pixelColor : color)\r\n    setPixelColor(color)\r\n    setCanChangeColor(true)\r\n    setIsHovered(true)\r\n  }\r\n\r\n  const resetColor = () => {\r\n    if (canChangeColor) {\r\n      setPixelColor(oldColor)\r\n    }\r\n\r\n    setCanChangeColor(true)\r\n    setIsHovered(false)\r\n  }\r\n\r\n  const onMouseDown = () => {\r\n    props.setMouseDown(true)\r\n    leftClickApplyColor()\r\n    checkColorAddedBefore(color)\r\n  }\r\n\r\n  const onMouseUp = () => {\r\n    props.setMouseDown(false)\r\n    leftClickApplyColor()\r\n  }\r\n\r\n  const drawLine = (e) => {\r\n    if (props.mouseDown === true && e.buttons === 1) {\r\n      leftClickApplyColor()\r\n    } else if (props.mouseDown === true && e.buttons === 2) {\r\n      rightClickApplyColor()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={pixelStyle}\r\n      className={`column-${props.x + 1} column`}\r\n      onClick={applyColor}\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}\r\n      onContextMenu={applyColor}\r\n      onMouseDown={onMouseDown}\r\n      onMouseOver={drawLine}\r\n      onMouseUp={onMouseUp}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PerPixel","import PerPixel from \"./PerPixel\"\r\n\r\nconst Row = (props) => {\r\n\r\n    let row = []\r\n    let grid = props.grid\r\n    let backgroundColor = props.backgroundColor\r\n    let color = props.color\r\n\r\n    for (let x = 0; x < props.width; x++) {\r\n        row.push(\r\n            <PerPixel\r\n                gridColor={props.gridColor}\r\n                mouseDown={props.mouseDown}\r\n                setMouseDown={props.setMouseDown} \r\n                showGrid={props.showGrid}\r\n                key={x}\r\n                divWidth={props.divWidth}\r\n                divHeight={props.divHeight}\r\n                grid={props.grid} \r\n                x={x}\r\n                y={props.y}\r\n                width={props.width}\r\n                height={props.height}\r\n                backgroundColor={backgroundColor}\r\n                color={color} \r\n                addedColors={props.addedColors}\r\n                setAddedColors={props.setAddedColors} \r\n                allUsedColors={props.allUsedColors}\r\n                setAllUsedColors={props.setAllUsedColors}\r\n            />)\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: grid, height: grid }} className={`row-${props.y + 1} per-row`}> {row} </div>\r\n    )\r\n}\r\n\r\nexport default Row","import Row from \"./Row\"\r\n\r\nconst PixelContainer = (props) => {\r\n\r\n    let width = props.width\r\n    let height = props.height\r\n    let backgroundColor = props.backgroundColor\r\n    let color = props.color\r\n    let row = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        row.push(\r\n        <Row \r\n            gridColor={props.gridColor}\r\n            showGrid={props.showGrid}\r\n            key={y}\r\n            grid={props.grid} \r\n            width={width} \r\n            divWidth={props.divWidth}\r\n            divHeight={props.divHeight} \r\n            height={height} \r\n            y={y} \r\n            backgroundColor={backgroundColor} \r\n            color={color}\r\n            mouseDown={props.mouseDown}\r\n            setMouseDown={props.setMouseDown}\r\n            addedColors={props.addedColors}\r\n            setAddedColors={props.setAddedColors}\r\n            allUsedColors={props.allUsedColors}\r\n            setAllUsedColors={props.setAllUsedColors} \r\n        />)\r\n    }\r\n\r\n    return (\r\n        <div className={\"pixel-container\"} style={{ width: props.divWidth, height: props.divHeight, borderWidth: \"1px 0 0 0\" }}>\r\n            {row}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PixelContainer","import ConfBar from \"../ConfigContainer/ConfBar\"\r\nimport PixelContainer from \"../PixelContainer/PixelContainer\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./main.css\"\r\nimport $ from \"jquery\"\r\n\r\nconst App = () => {\r\n  const [grid, setGrid] = useState(40)\r\n  const [showGrid, setShowGrid] = useState(true)\r\n  const [width, setWidth] = useState(16)\r\n  const [height, setHeight] = useState(16)\r\n  const [divWidth, setDivWith] = useState(width * grid)\r\n  const [divHeight, setDivHeight] = useState(height * grid)\r\n  const [backgroundColor, setBackgroundColor] = useState(\"black\")\r\n  const [color, setColor] = useState(\"#ffff\")\r\n  const [gridColor, setGridColor] = useState(\"#585858\")\r\n  const [openConfiguration, setOpenConfiguration] = useState(true)\r\n  const [addedColors, setAddedColors] = useState([])\r\n  const [allUsedColors, setAllUsedColors] = useState([])\r\n\r\n  const [mouseDown, setMouseDown] = useState(false)\r\n\r\n  useEffect(() => {\r\n    $(\".column\").css(\"height\", grid).css(\"width\", grid)\r\n    $(\".per-row\").css(\"height\", grid).css(\"width\", grid)\r\n    setDivHeight(height * grid)\r\n    setDivWith(width * grid)\r\n  }, [grid, height, width]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <PixelContainer\r\n        width={width}\r\n        height={height}\r\n        divWidth={divWidth}\r\n        divHeight={divHeight}\r\n        grid={grid}\r\n        gridColor={gridColor}\r\n        backgroundColor={backgroundColor}\r\n        color={color} \r\n        showGrid={showGrid}\r\n        mouseDown={mouseDown}\r\n        setMouseDown={setMouseDown}\r\n        addedColors={addedColors}\r\n        setAddedColors={setAddedColors}\r\n        allUsedColors={allUsedColors}\r\n        setAllUsedColors={setAllUsedColors}/>\r\n      <ConfBar \r\n        addedColors={addedColors}\r\n        backgroundColor={backgroundColor}\r\n        setBackgroundColor={setBackgroundColor}\r\n        color={color}\r\n        setColor={setColor}\r\n        gridColor={gridColor}\r\n        setGridColor={setGridColor}\r\n        showGrid={showGrid}\r\n        setShowGrid={setShowGrid}\r\n        openConfiguration={openConfiguration}\r\n        setOpenConfiguration={setOpenConfiguration}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './Components/Main/Main';\r\n\r\nReactDOM.render(\r\n    <Main />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}