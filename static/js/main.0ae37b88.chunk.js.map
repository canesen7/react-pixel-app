{"version":3,"sources":["Components/LeftBar/MainColors.jsx","Components/LeftBar/AddedColors.jsx","Components/LeftBar/LeftBar.jsx","Components/PixelContainer/PerPixel.jsx","Components/PixelContainer/Row.jsx","Components/PixelContainer/PixelContainer.jsx","Components/Main/Main.jsx","index.js"],"names":["MainColors","props","className","pickerList","map","picker","i","style","marginRight","background","color","width","name","height","onClick","publicShowColor","display","displayControl","position","top","disableAlpha","onChange","e","publicChangeColor","hex","AddedColors","addedColors","setColor","LeftBar","useState","showBGPicker","setShowBGPicker","setShowBGPickerDisplay","showColorPicker","setShowColorPicker","setShowColorPickerDisplay","showGridColorPicker","setShowGridColorPicker","setShowGridPickerDisplay","backgroundColor","showValue","gridColor","pluginName","setBackgroundColor","setGridColor","PerPixel","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","isPixelChanged","setIsPixelChanged","pixelStyle","border","showGrid","borderWidth","x","cursor","grid","leftClickApplyColor","rightClickApplyColor","applyColor","event","type","preventDefault","onMouseEnter","onMouseLeave","onContextMenu","onMouseDown","setMouseDown","Set","has","length","setAddedColors","checkColorAddedBefore","onMouseOver","mouseDown","buttons","onMouseUp","Row","row","push","divWidth","divHeight","y","allUsedColors","setAllUsedColors","PixelContainer","App","setShowGrid","setDivWith","setDivHeight","useEffect","$","css","ReactDOM","render","Main","document","getElementById"],"mappings":"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","file":"static/js/main.0ae37b88.chunk.js","sourcesContent":["import { ChromePicker } from 'react-color';\r\n\r\nconst MainColors = (props) => {\r\n    return(\r\n        <div className={\"colors\"}>\r\n        {props.pickerList.map((picker, i) => (\r\n            <div className=\"conf\" key={i} style={{marginRight: i === 2 ? \"\" : \"10px\"}}>\r\n                <div style={{ background: picker.color, width: picker.name === \"paletteColor\" ? \"50px\" : \"35px\", height: picker.name === \"paletteColor\" ? \"50px\" : \"35px\" }} className=\"color-picker\" onClick={() => props.publicShowColor(picker.name)}></div>\r\n                <div style={{ display: picker.displayControl, position: \"absolute\", top: i === 1 ? \"-220px\" : \"-215px\" }}>\r\n                    <ChromePicker disableAlpha={true} style={{ display: picker.displayControl }} color={picker.color} onChange={(e) => props.publicChangeColor(e.hex, picker.name)} />\r\n                </div>\r\n            </div>\r\n        ))}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default MainColors","const AddedColors = (props) => {\r\n    return (\r\n        <div className={\"added-colors\"}>\r\n            {props.addedColors.map((color) => (\r\n                <div className={\"color\"} style={{background: color}} onClick={() => props.setColor(color)}></div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddedColors","import { useState } from \"react\"\r\nimport MainColors from \"./MainColors\"\r\nimport AddedColors from \"./AddedColors\"\r\n\r\nconst LeftBar = (props) => {\r\n    const [showBGPicker, setShowBGPicker] = useState(false)\r\n    const setShowBGPickerDisplay = showBGPicker ? \"\" : \"none\"\r\n    const [showColorPicker, setShowColorPicker] = useState(false)\r\n    const setShowColorPickerDisplay = showColorPicker ? \"\" : \"none\"\r\n    const [showGridColorPicker, setShowGridColorPicker] = useState(false)\r\n    const setShowGridPickerDisplay = showGridColorPicker ? \"\" : \"none\"\r\n\r\n    const publicChangeColor = (color, pluginName) => {\r\n        if (pluginName === \"background\") {\r\n            props.setBackgroundColor(color)\r\n        } else if (pluginName === \"paletteColor\") {\r\n            props.setColor(color)\r\n        } else {\r\n            props.setGridColor(color)\r\n        }\r\n    }\r\n\r\n    const publicShowColor = pluginName => {\r\n        if (pluginName === \"background\") {\r\n            setShowBGPicker(!showBGPicker)\r\n            setShowColorPicker(false)\r\n            setShowGridColorPicker(false)\r\n        } else if (pluginName === \"paletteColor\") {\r\n            setShowColorPicker(!showColorPicker)\r\n            setShowBGPicker(false)\r\n            setShowGridColorPicker(false)\r\n        } else {\r\n            setShowGridColorPicker(!showGridColorPicker)\r\n            setShowColorPicker(false)\r\n            setShowBGPicker(false)\r\n        }\r\n    }\r\n\r\n    const pickerList = [{\r\n        name: \"background\",\r\n        background: props.backgroundColor,\r\n        showValue: showBGPicker,\r\n        displayControl: setShowBGPickerDisplay,\r\n        color: props.backgroundColor\r\n    },\r\n    {\r\n        name: \"paletteColor\",\r\n        background: props.color,\r\n        showValue: showColorPicker,\r\n        displayControl: setShowColorPickerDisplay,\r\n        color: props.color\r\n    },\r\n    {\r\n        name: \"gridColor\",\r\n        background: props.gridColor,\r\n        showValue: showGridColorPicker,\r\n        displayControl: setShowGridPickerDisplay,\r\n        color: props.gridColor\r\n    },\r\n\r\n    ]\r\n\r\n    return (\r\n        <div className={\"conf-container\"}>\r\n            <div className=\"color-container\">\r\n                <MainColors pickerList={pickerList} publicShowColor={publicShowColor} publicChangeColor={publicChangeColor} />\r\n                <AddedColors addedColors={props.addedColors} setColor={props.setColor}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeftBar","import { useEffect, useState } from \"react\"\r\n\r\nconst PerPixel = (props) => {\r\n\r\n  let backgroundColor = props.backgroundColor\r\n  let color = props.color\r\n\r\n  const [pixelColor, setPixelColor] = useState(color)\r\n  const [oldColor, setOldColor] = useState(pixelColor);\r\n  const [canChangeColor, setCanChangeColor] = useState(true)\r\n  const [isPixelChanged, setIsPixelChanged] = useState(false)\r\n\r\n  const pixelStyle = {\r\n    backgroundColor: isPixelChanged === true ? pixelColor : backgroundColor,\r\n    border: props.showGrid === true ? `1px solid ${props.gridColor}` : \"none\",\r\n    borderWidth: props.showGrid === true ? props.x === 0 ? \"0 1px 1px 1px\" : \"0 1px 1px 0\" : \"none\",\r\n    cursor: \"pointer\",\r\n    width: props.grid,\r\n    height: props.grid,\r\n    display: \"block\",\r\n    cursor: \"cell\",\r\n    boxSizing: \"inherit\"\r\n  }\r\n \r\n  const checkColorAddedBefore = (color) => {\r\n    const newColorList = new Set(props.addedColors);\r\n\r\n    if(newColorList.has(color) != true && props.addedColors.length < 7) {\r\n      props.setAddedColors([...props.addedColors, color])\r\n    }\r\n  }\r\n\r\n  const leftClickApplyColor = () => {\r\n    setPixelColor(color)\r\n    setCanChangeColor(false)\r\n    setIsPixelChanged(true)\r\n  }\r\n\r\n  const rightClickApplyColor = () => {\r\n    setPixelColor(backgroundColor)\r\n    setIsPixelChanged(false)\r\n    setCanChangeColor(false)\r\n  }\r\n\r\n  const applyColor = (event) => {\r\n    if (event.type === \"click\") {\r\n      leftClickApplyColor()\r\n    }\r\n    if (event.type === \"contextmenu\") {\r\n      event.preventDefault()\r\n      rightClickApplyColor()\r\n    }\r\n  }\r\n\r\n  const changeColorOnHover = () => {\r\n    setOldColor(isPixelChanged === true ? pixelColor : color)\r\n    setPixelColor(color)\r\n  }\r\n\r\n  const resetColor = () => {\r\n    if (canChangeColor) {\r\n      setPixelColor(oldColor)\r\n    }\r\n\r\n    setCanChangeColor(true)\r\n  }\r\n\r\n  const onMouseDown = () => {\r\n    props.setMouseDown(true)\r\n    leftClickApplyColor()\r\n    checkColorAddedBefore(color)\r\n  }\r\n\r\n  const onMouseUp = () => {\r\n    props.setMouseDown(false)\r\n    leftClickApplyColor()\r\n  }\r\n\r\n  const drawLine = (e) => {\r\n    if(props.mouseDown === true && e.buttons === 1) {\r\n      leftClickApplyColor()\r\n    } else if(props.mouseDown === true && e.buttons === 2) {\r\n      rightClickApplyColor()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={pixelStyle}\r\n      className={`column-${props.x + 1} column`}\r\n      onClick={applyColor}\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}\r\n      onContextMenu={applyColor}\r\n      onMouseDown={onMouseDown}\r\n      onMouseOver={drawLine}\r\n      onMouseUp={onMouseUp}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PerPixel","import PerPixel from \"./PerPixel\"\r\n\r\nconst Row = (props) => {\r\n\r\n    let row = []\r\n    let grid = props.grid\r\n    let backgroundColor = props.backgroundColor\r\n    let color = props.color\r\n\r\n    for (let x = 0; x < props.width; x++) {\r\n        row.push(\r\n            <PerPixel\r\n                gridColor={props.gridColor}\r\n                mouseDown={props.mouseDown}\r\n                setMouseDown={props.setMouseDown} \r\n                showGrid={props.showGrid}\r\n                key={x}\r\n                divWidth={props.divWidth}\r\n                divHeight={props.divHeight}\r\n                grid={props.grid} \r\n                x={x}\r\n                y={props.y}\r\n                width={props.width}\r\n                height={props.height}\r\n                backgroundColor={backgroundColor}\r\n                color={color} \r\n                addedColors={props.addedColors}\r\n                setAddedColors={props.setAddedColors} \r\n                allUsedColors={props.allUsedColors}\r\n                setAllUsedColors={props.setAllUsedColors}\r\n            />)\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: grid, height: grid }} className={`row-${props.y + 1} per-row`}> {row} </div>\r\n    )\r\n}\r\n\r\nexport default Row","import Row from \"./Row\"\r\n\r\nconst PixelContainer = (props) => {\r\n\r\n    let width = props.width\r\n    let height = props.height\r\n    let backgroundColor = props.backgroundColor\r\n    let color = props.color\r\n    let row = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        row.push(\r\n        <Row \r\n            gridColor={props.gridColor}\r\n            showGrid={props.showGrid}\r\n            key={y}\r\n            grid={props.grid} \r\n            width={width} \r\n            divWidth={props.divWidth}\r\n            divHeight={props.divHeight} \r\n            height={height} \r\n            y={y} \r\n            backgroundColor={backgroundColor} \r\n            color={color}\r\n            mouseDown={props.mouseDown}\r\n            setMouseDown={props.setMouseDown}\r\n            addedColors={props.addedColors}\r\n            setAddedColors={props.setAddedColors}\r\n            allUsedColors={props.allUsedColors}\r\n            setAllUsedColors={props.setAllUsedColors} \r\n        />)\r\n    }\r\n\r\n    return (\r\n        <div className={\"pixel-container\"} style={{ width: props.divWidth, height: props.divHeight, borderWidth: \"1px 0 0 0\" }}>\r\n            {row}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PixelContainer","import LeftBar from \"../LeftBar/LeftBar\"\nimport PixelContainer from \"../PixelContainer/PixelContainer\";\nimport { useState, useEffect } from \"react\";\nimport \"./main.css\"\nimport $ from \"jquery\"\n\nconst App = () => {\n  const [grid, setGrid] = useState(20)\n  const [showGrid, setShowGrid] = useState(true)\n  const [width, setWidth] = useState(25)\n  const [height, setHeight] = useState(25)\n  const [divWidth, setDivWith] = useState(width * grid)\n  const [divHeight, setDivHeight] = useState(height * grid)\n  const [backgroundColor, setBackgroundColor] = useState(\"black\")\n  const [color, setColor] = useState(\"#ffff\")\n  const [gridColor, setGridColor] = useState(\"#585858\")\n  const [addedColors, setAddedColors] = useState([])\n  const [allUsedColors, setAllUsedColors] = useState([])\n\n  const [mouseDown, setMouseDown] = useState(false)\n\n  useEffect(() => {\n    $(\".column\").css(\"height\", grid).css(\"width\", grid)\n    $(\".per-row\").css(\"height\", grid).css(\"width\", grid)\n    setDivHeight(height * grid)\n    setDivWith(width * grid)\n  }, [grid, height, width]);\n\n  return (\n    <div className=\"container\">\n      <PixelContainer\n        width={width}\n        height={height}\n        divWidth={divWidth}\n        divHeight={divHeight}\n        grid={grid}\n        gridColor={gridColor}\n        backgroundColor={backgroundColor}\n        color={color} \n        showGrid={showGrid}\n        mouseDown={mouseDown}\n        setMouseDown={setMouseDown}\n        addedColors={addedColors}\n        setAddedColors={setAddedColors}\n        allUsedColors={allUsedColors}\n        setAllUsedColors={setAllUsedColors}/>\n      <LeftBar \n        addedColors={addedColors}\n        backgroundColor={backgroundColor}\n        setBackgroundColor={setBackgroundColor}\n        color={color}\n        setColor={setColor}\n        gridColor={gridColor}\n        setGridColor={setGridColor}\n        showGrid={showGrid}\n        setShowGrid={setShowGrid}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Components/Main/Main';\n\nReactDOM.render(\n    <Main />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}